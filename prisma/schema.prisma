generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  user_id                       Int
  title                         String
  description                   String
  status                        String?       @db.VarChar(10)
  picture                       String[]
  pickup                        String?
  req_count                     Int?
  id                            Int           @id @unique @default(autoincrement())
  isPost_trade                  Boolean       @default(false)
  address                       String?
  postdate                      DateTime?     @db.Timestamptz(6)
  User                          User          @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "book_user_id")
  Review_Book                   Review_Book[]
  Trade_Trade_book_idToBook     Trade[]       @relation("Trade_book_idToBook")
  Trade_Trade_req_book_idToBook Trade[]       @relation("Trade_req_book_idToBook")
  Wishlist                      Wishlist[]
  category                      Category[]    @relation("BookToCategory")
}

model Review_Book {
  id       Int     @default(autoincrement())
  book_id  Int
  user_id  Int
  score    Decimal @db.Decimal(1, 0)
  describe String? @db.VarChar(100)
  title    String  @db.VarChar(20)
  Book     Book    @relation(fields: [book_id], references: [id], onDelete: Cascade, map: "review_book-book_id")
  User     User    @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "review_book-user_id")

  @@id([id, book_id, user_id])
}

model Trade {
  id                           Int      @id @default(autoincrement())
  book_id                      Int
  owner_id                     Int
  req_user_id                  Int
  datetime                     DateTime @db.Date
  status                       String   @db.VarChar(10)
  pickup_req                   String?
  req_book_id                  Int
  req_address                  String?
  Book_Trade_book_idToBook     Book     @relation("Trade_book_idToBook", fields: [book_id], references: [id], onDelete: NoAction, map: "trade-book_id")
  User_Trade_owner_idToUser    User     @relation("Trade_owner_idToUser", fields: [owner_id], references: [id], onDelete: NoAction, map: "trade-owner_id")
  Book_Trade_req_book_idToBook Book     @relation("Trade_req_book_idToBook", fields: [req_book_id], references: [id], onDelete: NoAction, map: "trade-req_book_id")
  User                         User     @relation(fields: [req_user_id], references: [id], onDelete: NoAction, map: "trade-req_user_id")
}

model User {
  id                                        Int           @id @default(autoincrement())
  username                                  String        @unique @db.VarChar(20)
  password                                  String
  email                                     String        @unique @db.VarChar(40)
  first_name                                String        @db.VarChar(20)
  last_name                                 String        @db.VarChar(20)
  profile_picture                           String?       @default("https://dfmtboqfsygnjttfuvgq.supabase.co/storage/v1/object/public/b-trade/profile/default-user.jpg?t=2024-05-16T10%3A23%3A27.778Z")
  phone_number                              String        @unique @db.VarChar(10)
  card_id                                   String        @unique @db.VarChar(13)
  instagram                                 String?       @db.VarChar(20)
  facebook                                  String?
  line                                      String?       @db.VarChar(20)
  address                                   String[]
  isAdmin                                   Boolean       @default(false)
  Book                                      Book[]
  Review_Book                               Review_Book[]
  Review_User_Review_User_reviewer_idToUser Review_User[] @relation("Review_User_reviewer_idToUser")
  Review_User_Review_User_user_idToUser     Review_User[] @relation("Review_User_user_idToUser")
  Trade_Trade_owner_idToUser                Trade[]       @relation("Trade_owner_idToUser")
  Trade                                     Trade[]
  Userlike                                  Userlike[]
  Wishlist                                  Wishlist[]
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(20)
  Userlike Userlike[]
  book     Book[]     @relation("BookToCategory")
}

model Review_User {
  id                                 Int     @default(autoincrement())
  user_id                            Int
  reviewer_id                        Int
  score                              Decimal @db.Decimal(1, 0)
  describe                           String?
  title                              String
  User_Review_User_reviewer_idToUser User    @relation("Review_User_reviewer_idToUser", fields: [reviewer_id], references: [id], onDelete: NoAction, map: "review_user-reviewer_id")
  User_Review_User_user_idToUser     User    @relation("Review_User_user_idToUser", fields: [user_id], references: [id], onDelete: Cascade, map: "review_user-user_id")

  @@id([id, user_id, reviewer_id])
}

model Wishlist {
  id      Int  @default(autoincrement())
  user_id Int
  book_id Int
  Book    Book @relation(fields: [book_id], references: [id], onDelete: Cascade, map: "wishlist-book_id")
  User    User @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "wishlist-user_id")

  @@id([id, user_id, book_id])
}

model Userlike {
  user_id     Int
  category_id Int
  Category    Category @relation(fields: [category_id], references: [id], onDelete: NoAction, map: "Userlike-category_id")
  User        User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "Userlike-user_id")

  @@id([user_id, category_id])
}
